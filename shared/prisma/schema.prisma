generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String             @db.VarChar(255)
  avatar        String?
  username      String?            @unique
  signature     String?            @unique
  signedMessage String?
  publicKey     String?
  signDate      DateTime?
  acceptedTerms Boolean            @default(false)
  createdAt     DateTime           @default(now())
  updatedAt     DateTime           @updatedAt
  shortLink     String?            @unique
  coverImage    String?
  accountStatus Boolean            @default(false)
  point         Int                @default(0)
  twitterId     String?
  teleId        String?
  referrer      User?              @relation("UserReferral", fields: [referrerId], references: [id])
  referrerId    String?
  referees      User[]             @relation("UserReferral")
  logs          UserActivityLogs[]
  loginHistory  LoginHistory[]

  @@id([id])
  @@map("users")
}

model Platform {
  id        String             @id @default("uu")
  name      String
  criterias PlatformCriteria[]
}

model Criteria {
  id          Int                @id @default(autoincrement())
  description String?
  query       String?
  point       Int                @default(0)
  platform    PlatformCriteria[]
}

model PlatformCriteria {
  criteria     Criteria           @relation(fields: [criteriaId], references: [id])
  criteriaId   Int
  platform     Platform           @relation(fields: [platformId], references: [id])
  platformId   String
  logs         UserActivityLogs[]
  lastIdSynced String?

  @@id([criteriaId, platformId])
}

model UserActivityLogs {
  user       User             @relation(fields: [userId], references: [id])
  userId     String
  task       PlatformCriteria @relation(fields: [criteriaId, platformId], references: [criteriaId, platformId])
  criteriaId Int
  platformId String
  time       DateTime         @default(now())

  @@id([userId, criteriaId, platformId])
  @@index([time(sort: Desc)])
}

model LoginHistory {
  id      Int      @id @default(autoincrement())
  userId  String
  loginAt DateTime @default(now())
  user    User     @relation(fields: [userId], references: [id])

  @@map("login_histories")
}
