generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 String             @db.VarChar(255)
  avatar             String?
  username           String?            @unique
  signature          String?            @unique
  signedMessage      String?
  publicKey          String?
  signDate           DateTime?
  acceptedTerms      Boolean            @default(false)
  createdAt          DateTime           @default(now())
  updatedAt          DateTime           @updatedAt
  shortLink          String?            @unique
  coverImage         String?
  accountStatus      Boolean            @default(false)
  point              Decimal            @default(0)
  twitterId          String?            @unique
  teleId             String?
  referrer           User?              @relation("UserReferral", fields: [referrerId], references: [id])
  referrerId         String?
  referees           User[]             @relation("UserReferral")
  isNewMemberClaimed Boolean            @default(false)
  claimStreak        Int                @default(0)
  logs               UserActivityLogs[]
  loginHistory       CheckinHistory[]

  @@id([id])
  @@map("users")
}

model Platform {
  id        String             @id @default("base")
  name      String
  criterias PlatformCriteria[]
}

model Criteria {
  id          Int                @id @default(autoincrement())
  description String?
  rate        Float              @default(0)
  platform    PlatformCriteria[]
}

model PlatformCriteria {
  criteria     Criteria           @relation(fields: [criteriaId], references: [id])
  criteriaId   Int
  platform     Platform           @relation(fields: [platformId], references: [id])
  platformId   String
  logs         UserActivityLogs[]
  lastIdSynced String?
  query        Json?
  isDaily      Boolean            @default(false)
  id           String             @id @default(uuid())
}

model UserActivityLogs {
  user         User             @relation(fields: [userId], references: [id])
  userId       String
  task         PlatformCriteria @relation(fields: [taskId], references: [id])
  taskId       String
  time         DateTime         @default(now())
  id           String           @id @default(uuid())
  pointClaimed Decimal

  @@index([userId, taskId])
  @@index([time(sort: Desc)])
}

model CheckinHistory {
  id      Int      @id @default(autoincrement())
  userId  String
  loginAt DateTime @default(now())
  user    User     @relation(fields: [userId], references: [id])

  @@index([userId, loginAt(sort: Desc)])
  @@map("login_histories")
}

model TransactionLog {
  txHash    String      @id
  userId    String
  status    TX_STATUS
  description String
}

enum TX_STATUS {
  FAILED
  SUCCESS
}
